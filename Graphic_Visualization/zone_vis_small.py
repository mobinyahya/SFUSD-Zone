import csv
import glob
import os

import shapely.geometry as sg
import matplotlib.colors as mcolors
import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from shapely.geometry import Point
from Zone_Generation.Config.Constants import *
import json


# I'm dividing the city of sun fransico into zones. Each unit of the city is a BlockGroup, which has a distinct id.
# I am able to plot my zones, using this static code. But I want to be able draw these in an interactive html/css/web based code (react etc). Such that the user can hover the mouse over each zone, and when they hover it over the zone, the zone number would be shown. (so if they hover the mouse over a blockgroup X, where we know this blockgroup blongs to zone 1, I want to show users information about zone 1 (i.e. say "this is zone 1").
# how can I do that? what files do I need for that?
#
#  want to show a map in react web code (or Next.js), using the census shapefiles for San Francisco.
# i have a dictionary zone_dict mapping each blockgroup, or geoid10, of the city to a zone_id number.
# The focus is that each blockgroup of the city, needs to be colored with the color corresponding to its zone_id number.
# (the focus of the map is showing the color of blockgroups, and not much on the streets etc)
# I want the map to be interactive, that when the user navigates the curser over a blockgroup, they can see some information (such as "This blockgroup belongs to zone X")
# I want also the geographical units (such as blocks) that belong to a zone, all be grouped together, so that in the UI, user can only select the
# whole zone (and see its corresponding information). In other words, I want to merge my small block units
#     into a single zone (the ones that are matched to the same zone based on their zone_id).
#     How can I do that, and how should I modify the code to achieve this?


class ZoneVisualizer:
    def __init__(self, level):
        self.level = level

        # read data:
        # Changed to shape files folder from 2010 census
        path = os.path.expanduser('~/SFUSD/shapefiles/geo_export_d4e9e90c-ff77-4dc9-a766-6a1a7f7d9f9c.shp')
        self.sf = gpd.read_file(path)
        self.sf['geoid10'] = self.sf['geoid10'].fillna(value=0).astype('int64', copy=False)

        df = pd.read_csv('~/Dropbox/SFUSD/Optimization/block_blockgroup_tract.csv')
        df['Block'] = df['Block'].fillna(value=0).astype('int64', copy=False)
        self.sf = self.sf.merge(df, how='left', left_on='geoid10', right_on='Block')
        self.sf = self.sf.to_crs(epsg=4326)



    def zones_from_dict(self, zone_dict):

        # drop rows that have NaN for zone_id
        self.sf.dropna(subset=[self.level], inplace=True)
        self.sf['zone_id'] = self.sf[self.level].replace(zone_dict)
        self.sf['filter'] = self.sf['zone_id'].apply(lambda x: 1 if int(x) in range(1000) else 0)
        df = self.sf.loc[self.sf['filter'] == 1]

        plt.figure(figsize=(20, 20))
        ax = self.sf.boundary.plot(ax=plt.gca(), alpha=0.4, color='grey')

        # Create a new column 'zone_color' with colors based on zone_id
        df['zone_color'] = df['zone_id'].map(zone_colors)

        # Plot zones using the 'zone_color' column
        df.plot(ax=ax, color=df['zone_color'], legend=True, aspect=1)

        plt.gca().set_yticklabels([])
        plt.gca().set_xticklabels([])
        plt.gca().set_xlim(-122.525, -122.350)
        plt.gca().set_ylim(37.70, 37.84)
        print("self.sf ", self.sf)
        print("self.sf ", self.sf.columns)

        self.sf['zone_id'] = self.sf['BlockGroup'].map(zone_dict).fillna(-1).astype(int)
        print("self.sf[zone_id] ", self.sf[["zone_id", "BlockGroup"]])
        exit()
        self.sf.to_file('sf_block_groups.geojson', driver='GeoJSON')




if __name__ == "__main__":
    zv = ZoneVisualizer("BlockGroup")

    # zoneDict = {60750204012: 0, 60750204021: 1, 60750204022: 1, 60750210003: 2}
    zoneDict = {60750204012: 0, 60750204021: 0, 60750204022: 0, 60750210003: 0, 60750210004: 0, 60750212002: 0, 60750213001: 0, 60750213002: 0, 60750214001: 0, 60750214002: 0, 60750214003: 0, 60750215001: 0, 60750215002: 0, 60750215003: 0, 60750215004: 0, 60750215005: 0, 60750216001: 0, 60750216002: 0, 60750217001: 0,
                60750217002: 0, 60750217003: 0, 60750218001: 0, 60750218002: 0, 60750218003: 0, 60750218004: 0, 60750230011: 0, 60750230012: 0, 60750230013: 0, 60750230031: 0, 60750230032: 0, 60750231021: 0, 60750231022: 0, 60750231031: 0, 60750231032: 0, 60750232001: 0, 60750232002: 0, 60750232003: 0, 60750233001: 0,
                60750234001: 0, 60750234002: 0, 60750251001: 0, 60750251002: 0, 60750251003: 0, 60750252002: 0, 60750252003: 0, 60750252004: 0, 60750253001: 0, 60750253002: 0, 60750253003: 0, 60750253004: 0, 60750254011: 0, 60750254012: 0, 60750254013: 0, 60750254021: 0, 60750254022: 0, 60750254023: 0, 60750254031: 0,
                60750254032: 0, 60750255001: 0, 60750255002: 0, 60750256001: 0, 60750256002: 0, 60750256003: 0, 60750256004: 0, 60750257011: 0, 60750257012: 0, 60750257013: 0, 60750257021: 0, 60750257022: 0, 60750257023: 0, 60750258001: 0, 60750258002: 0, 60750259001: 0, 60750259002: 0, 60750259003: 0, 60750260021: 0,
                60750260022: 0, 60750264011: 0, 60750264012: 0, 60750264021: 0, 60750264022: 0, 60750264023: 0, 60750264031: 0, 60750264032: 0, 60750305001: 0, 60750305002: 0, 60750305003: 0, 60750311001: 0, 60750605021: 0, 60750610001: 0, 60750610002: 0, 60750612001: 0, 60750612002: 0, 60759805011: 0, 60759806001: 0,
                60759809001: 0, 60750255003: 1, 60750255004: 1, 60750255005: 1, 60750255006: 1, 60750260011: 1, 60750260012: 1, 60750260031: 1, 60750260032: 1, 60750260041: 1, 60750260042: 1, 60750261001: 1, 60750261002: 1, 60750261003: 1, 60750261004: 1, 60750262001: 1, 60750262002: 1, 60750262003: 1, 60750262004: 1,
                60750262005: 1, 60750263011: 1, 60750263012: 1, 60750263013: 1, 60750263021: 1, 60750263022: 1, 60750263023: 1, 60750263031: 1, 60750263032: 1, 60750264041: 1, 60750264042: 1, 60750304001: 1, 60750304002: 1, 60750304004: 1, 60750304005: 1, 60750306001: 1, 60750306002: 1, 60750306003: 1, 60750307001: 1,
                60750307002: 1, 60750307003: 1, 60750308001: 1, 60750308002: 1, 60750308003: 1, 60750308004: 1, 60750308005: 1, 60750309001: 1, 60750309002: 1, 60750309003: 1, 60750309004: 1, 60750309005: 1, 60750309006: 1, 60750309007: 1, 60750310001: 1, 60750310002: 1, 60750310003: 1, 60750311002: 1, 60750311003: 1,
                60750311004: 1, 60750311005: 1, 60750312011: 1, 60750312012: 1, 60750312013: 1, 60750312014: 1, 60750312021: 1, 60750312022: 1, 60750313011: 1, 60750313012: 1, 60750313013: 1, 60750313021: 1, 60750313023: 1, 60750314001: 1, 60750314002: 1, 60750314003: 1, 60750314004: 1, 60750314005: 1, 60750605022: 1,
                60750605023: 1, 60750301011: 2, 60750301012: 2, 60750301013: 2, 60750301014: 2, 60750301021: 2, 60750301022: 2, 60750302011: 2, 60750302012: 2, 60750302013: 2, 60750302021: 2, 60750302022: 2, 60750302023: 2, 60750303011: 2, 60750303012: 2, 60750303013: 2, 60750303014: 2, 60750303021: 2, 60750303022: 2,
                60750303023: 2, 60750304003: 2, 60750313022: 2, 60750326011: 2, 60750326012: 2, 60750326013: 2, 60750326021: 2, 60750326022: 2, 60750326023: 2, 60750327001: 2, 60750327002: 2, 60750327003: 2, 60750327004: 2, 60750327005: 2, 60750327006: 2, 60750327007: 2, 60750328011: 2, 60750328012: 2, 60750328013: 2,
                60750328021: 2, 60750328022: 2, 60750328023: 2, 60750329011: 2, 60750329012: 2, 60750329013: 2, 60750329014: 2, 60750329021: 2, 60750329022: 2, 60750329023: 2, 60750330001: 2, 60750330002: 2, 60750330003: 2, 60750330004: 2, 60750330005: 2, 60750330006: 2, 60750331001: 2, 60750331002: 2, 60750331003: 2,
                60750331004: 2, 60750332011: 2, 60750332031: 2, 60750332032: 2, 60750332041: 2, 60750332042: 2, 60750332043: 2, 60750351001: 2, 60750351002: 2, 60750351003: 2, 60750351004: 2, 60750351005: 2, 60750351006: 2, 60750351007: 2, 60750352011: 2, 60750352012: 2, 60750352013: 2, 60750352014: 2, 60750352015: 2,
                60750352021: 2, 60750352022: 2, 60750352023: 2, 60750353001: 2, 60750353002: 2, 60750353003: 2, 60750353004: 2, 60750353005: 2, 60750353006: 2, 60750354001: 2, 60750354002: 2, 60750354003: 2, 60750354004: 2, 60750354005: 2, 60750478011: 2, 60750478012: 2, 60750478021: 2, 60750478022: 2, 60750478023: 2,
                60750479011: 2, 60750479012: 2, 60750479013: 2, 60750479014: 2, 60750479015: 2, 60750479021: 2, 60750479022: 2, 60750479023: 2, 60750604001: 2, 60759802001: 2, 60759803001: 2, 60750101001: 3, 60750101002: 3, 60750102001: 3, 60750102002: 3, 60750102003: 3, 60750103001: 3, 60750103002: 3, 60750103003: 3,
                60750104001: 3, 60750104002: 3, 60750104003: 3, 60750104004: 3, 60750105001: 3, 60750105002: 3, 60750106001: 3, 60750106002: 3, 60750106003: 3, 60750107001: 3, 60750107002: 3, 60750107003: 3, 60750107004: 3, 60750108001: 3, 60750108002: 3, 60750108003: 3, 60750109001: 3, 60750109002: 3, 60750109003: 3,
                60750110001: 3, 60750110002: 3, 60750110003: 3, 60750111001: 3, 60750111002: 3, 60750112001: 3, 60750112002: 3, 60750112003: 3, 60750113001: 3, 60750113002: 3, 60750117001: 3, 60750118001: 3, 60750119011: 3, 60750119021: 3, 60750119022: 3, 60750126011: 3, 60750126021: 3, 60750126022: 3, 60750127001: 3,
                60750127002: 3, 60750127003: 3, 60750128001: 3, 60750128002: 3, 60750128003: 3, 60750128004: 3, 60750129011: 3, 60750129012: 3, 60750129021: 3, 60750129022: 3, 60750129023: 3, 60750130001: 3, 60750130002: 3, 60750130003: 3, 60750130004: 3, 60750131011: 3, 60750131012: 3, 60750131021: 3, 60750131022: 3,
                60750132001: 3, 60750132002: 3, 60750132003: 3, 60750133001: 3, 60750133002: 3, 60750133003: 3, 60750133004: 3, 60750133005: 3, 60750134001: 3, 60750134002: 3, 60750134003: 3, 60750135001: 3, 60750135002: 3, 60750151001: 3, 60750152001: 3, 60750152002: 3, 60750152003: 3, 60750153001: 3, 60750153002: 3,
                60750154001: 3, 60750154002: 3, 60750154003: 3, 60750154004: 3, 60750154005: 3, 60750155001: 3, 60750155002: 3, 60750155003: 3, 60750401001: 3, 60750401002: 3, 60750401003: 3, 60750401004: 3, 60750402001: 3, 60750402003: 3, 60750402004: 3, 60750426012: 3, 60750426022: 3, 60750426023: 3, 60750428003: 3,
                60750601001: 3, 60750611001: 3, 60750611002: 3, 60750611003: 3, 60750111003: 4, 60750117002: 4, 60750119012: 4, 60750120001: 4, 60750120002: 4, 60750121001: 4, 60750121002: 4, 60750122011: 4, 60750122012: 4, 60750122021: 4, 60750123011: 4, 60750123012: 4, 60750123021: 4, 60750123022: 4, 60750124011: 4,
                60750124012: 4, 60750124021: 4, 60750124022: 4, 60750124023: 4, 60750125011: 4, 60750125012: 4, 60750125021: 4, 60750125022: 4, 60750151002: 4, 60750156001: 4, 60750156002: 4, 60750156003: 4, 60750157001: 4, 60750157002: 4, 60750157003: 4, 60750157004: 4, 60750158011: 4, 60750158012: 4, 60750158013: 4,
                60750158021: 4, 60750158022: 4, 60750159001: 4, 60750159002: 4, 60750160001: 4, 60750161001: 4, 60750161002: 4, 60750161003: 4, 60750161004: 4, 60750162001: 4, 60750162002: 4, 60750162003: 4, 60750163001: 4, 60750163002: 4, 60750163003: 4, 60750164001: 4, 60750164002: 4, 60750165001: 4, 60750165002: 4,
                60750165003: 4, 60750165004: 4, 60750166001: 4, 60750166002: 4, 60750166003: 4, 60750166004: 4, 60750167001: 4, 60750167002: 4, 60750167003: 4, 60750167004: 4, 60750168011: 4, 60750168012: 4, 60750168013: 4, 60750168021: 4, 60750168022: 4, 60750168023: 4, 60750169001: 4, 60750169002: 4, 60750170001: 4,
                60750170002: 4, 60750170003: 4, 60750171011: 4, 60750171012: 4, 60750171013: 4, 60750171021: 4, 60750171022: 4, 60750171023: 4, 60750202001: 4, 60750204011: 4, 60750301023: 4, 60750402002: 4, 60750426011: 4, 60750426021: 4, 60750427001: 4, 60750427002: 4, 60750427003: 4, 60750428001: 4, 60750428002: 4,
                60750451001: 4, 60750451002: 4, 60750451003: 4, 60750452001: 4, 60750452002: 4, 60750452003: 4, 60750452004: 4, 60750452005: 4, 60750476001: 4, 60750476002: 4, 60750476003: 4, 60750476004: 4, 60750477011: 4, 60750477012: 4, 60750477013: 4, 60750477021: 4, 60750477022: 4, 60750477023: 4, 60750478013: 4,
                60750176012: 5, 60750176013: 5, 60750176014: 5, 60750176015: 5, 60750177001: 5, 60750177002: 5, 60750178011: 5, 60750178012: 5, 60750178021: 5, 60750178022: 5, 60750179021: 5, 60750180001: 5, 60750180002: 5, 60750201001: 5, 60750201002: 5, 60750201003: 5, 60750201004: 5, 60750202002: 5, 60750202003: 5,
                60750203001: 5, 60750203002: 5, 60750203003: 5, 60750204013: 5, 60750205001: 5, 60750205002: 5, 60750205003: 5, 60750206001: 5, 60750206002: 5, 60750206003: 5, 60750206004: 5, 60750207001: 5, 60750207002: 5, 60750207003: 5, 60750208001: 5, 60750208002: 5, 60750208003: 5, 60750208004: 5, 60750209001: 5,
                60750209002: 5, 60750209003: 5, 60750209004: 5, 60750210001: 5, 60750210002: 5, 60750211001: 5, 60750211002: 5, 60750211003: 5, 60750211004: 5, 60750212001: 5, 60750212003: 5, 60750226001: 5, 60750226002: 5, 60750227021: 5, 60750227022: 5, 60750227041: 5, 60750227042: 5, 60750228011: 5, 60750228012: 5,
                60750228013: 5, 60750228021: 5, 60750228022: 5, 60750228031: 5, 60750228032: 5, 60750228033: 5, 60750229011: 5, 60750229012: 5, 60750229013: 5, 60750229021: 5, 60750229022: 5, 60750229031: 5, 60750229032: 5, 60750229033: 5, 60750252001: 5, 60750607001: 5, 60750607002: 5, 60750607003: 5, 60750614001: 5,
                60750614002: 5, 60750614003: 5, 60750615001: 5, 60750615002: 5, 60750615003: 5, 60750615004: 5, 60750615005: 5, 60750615006: 5, 60750176011: 5}


    # Convert the zone dictionary to JSON format
    zone_dict_json = json.dumps(zoneDict)

    # Write the JSON data to a file
    with open('zoneDict2.json', 'w') as file:
        file.write(zone_dict_json)

    # zv.zones_from_dict(zoneDict)
